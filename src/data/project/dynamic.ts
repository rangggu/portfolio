import { ProjectType } from "../project"

export const DYNAMIC: ProjectType = {
  index: 2,
  title: "Dynamic Balance",
  subtitle: "인체 균형 능력 분석 서비스",
  summary: "인체 균형 능력측정 및 맞춤 솔루션을 제공하는 모바일 앱",
  background: "/images/project/balance.png",
  desc: [
    "React Native를 활용한 모바일 앱 개발 및 유지보수",
    "프로세스 최적화로 단계 간소화 및 소요 시간 단축",
    "고객 피드백을 반영한 애자일 개발 방식으로 빠른 개선 및 대응",
  ],
  date: "@2023. 09 ~ 2024. 12",
  tag: "직장",
  contribution: 40,
  overview: {
    problem: [
      "사용자가 오프라인에서 결과를 활용하기 어려워요 😩",
      "측정하고 결과를 보는 프로세스가 조금 복잡해요 😕",
    ],
    solution: [
      "PDF 출력 기능으로 사용자가 결과지를 바로 받아볼 수 있어요!",
      "불필요한 절차를 제거하고 프로세스 최적화를 진행하여 시간이 절약돼요",
    ],
  },
  preview: {
    type: "image",
    link: [""],
  },
  skill: [
    { name: "React Native", src: "/images/icon/react.png" },
    { name: "TypeScript", src: "/images/icon/ts.png" },
    { name: "Recoil", src: "/images/icon/recoil.png" },
    { name: "Styled Components", src: "/images/icon/styled-components.png" },
    { name: "nativewind", src: "/images/icon/tailwind.png" },
    { name: "Figma", src: "/images/icon/figma.png" },
    { name: "Node.js", src: "/images/icon/node.png" },
  ],
  result: [
    {
      title: "프로세스 최적화 및 UX 개선",
      desc: [
        `불필요한 입력 절차를 제거해 측정 준비 시간을 기존 10초에서 <strong class="font-semibold text-yellow500">5초</strong>로 단축`,
        `측정 장치와 <strong class="font-semibold text-yellow500">자동 연결</strong>되도록 설계해 재연결 단계 간소화`,
        `결과 확인·출력 과정이 3단계 -> <strong class="font-semibold text-yellow500">1단계</strong>로 간소화`,
      ],
    },
    {
      title: "고객 피드백 반영 및 기능 개선",
      desc: [
        `성인 모드 중심이던 서비스에 <strong class="font-semibold text-yellow500">‘아동 모드’</strong>와 <strong class="font-semibold text-yellow500">‘가로 모드’</strong>를 추가하여 다양한 사용자층 및 디바이스 환경에 대응`,
        `설문결과를 반영해 <strong class="font-semibold text-yellow500">PDF 출력</strong> 기능 도입`,
        `정기 고객사 미팅을 월 1회로 운영해 주기적인 신규 요청사항을 반영`,
      ],
    },
    {
      title: "데이터 분석 및 시각화",
      desc: [
        `막대, 꺾은선, 레이더, 표 등 총 <strong class="font-semibold text-yellow500">4종의 차트</strong> 유형 제공`,
        `<strong class="font-semibold text-yellow500">히스토리컬 데이터</strong> 비교 기능 추가로 기간별 추세 분석`,
      ],
    },
    {
      title: "이슈·장애 해결",
      desc: [`블루투스 스캔 오류 해결을 위한 스캔 타임아웃 연장 및 자동 재스캔 프로세스 도입`],
    },
  ],
  function: [
    {
      name: "프로세스 최적화 및 기능 도입",
      icon: "⚙️",
      info: [
        {
          title: "사용자 정보 입력 단계 간소화",
          desc: `사용자가 불필요한 항목에 시간을 소비하는 문제를 파악한 후, 필수 
          정보만 입력하도록 폼을 재설계하고, 한 번 입력된 데이터는 로컬 스토리지에 저장하여 
          재방문 시 자동 완성 기능을 도입했습니다.`,
        },
        {
          title: "측정 장치 자동 연결 지원",
          desc: `측정 장치와의 연결 과정에서 사용자가 반복적으로 재연결을 
          해야 하는 문제를 해결하기 위해, 이전에 연결된 적이 있는 측정 장치인 
          경우에는 자동으로 연결되도록 프로세스를 개선했습니다.`,
        },
        {
          title: "측정 후 결과 확인 및 출력 과정 간소화",
          desc: `기존에는 결과와 관련된 차트와 상세 내용이 순차적으로 출력되고, 
          마지막에 PDF 출력 기능이 제공되었습니다. 하지만 고객의 ‘바로 PDF로 
          확인하고 싶다’는 요구를 반영해, 종합 결과 표시 창과 상세 결과 창을 
          분리했습니다. 종합 결과 창에는 요약된 결과와 함께 PDF 출력 버튼을 
          배치하여, 사용자들이 바로 전체 결과를 PDF로 확인할 수 있도록 프로세스를 
          개선했습니다.`,
        },
        {
          title: "PDF 출력 기능 도입",
          desc: `초기 버전에는 PDF 출력 기능이 포함되어 있지 않았습니다. 그러나 
          정기 고객 미팅에서 '결과지를 PDF로 다운로드 받아 확인하고 싶다'는 
          피드백을 받아 이를 새롭게 도입하였습니다.`,
        },
      ],
    },
    {
      name: "UI/UX 개선",
      icon: "🎨",
      info: [
        {
          title: "연령별 모드 추가",
          desc: `성인 모드만 있던 기존 구조를 재설계해, 아동 모드와 성인 모드를 분리했습니다. 
          아동 모드는 큰 아이콘과 친근한 색감을 사용하고, 성인 모드는 정보를 직관적으로 
          파악할 수 있도록 UI를 구성했습니다.`,
        },
        {
          title: "가로모드 지원",
          desc: `세로형 키오스크에 특화된 레이아웃에서 벗어나, 가로형 디바이스도 
          자동 감지·전환하도록 수정했습니다. 텍스트와 그래프가 어색하지 않도록 
          레이아웃을 전면 검토해 다양한 환경에서도 일관성 있는 UX를 제공했습니다.`,
        },
      ],
    },
    {
      name: "데이터 관리 및 시각화",
      icon: "📊",
      info: [
        {
          title: "다양한 차트 시각화",
          desc: `단일 차트 유형만 제공하여 각종 결과를 한 가지 방식으로만 제공하던 
          초기 시스템을 개선하기 위해 막대·꺾은선·레이더·표 등 여러 차트 유형을 
          도입하였습니다.`,
        },
        {
          title: "Backend API 개발",
          desc: `과거 데이터를 기반으로 한 추세 분석의 필요성이 커져, 특정 기간별 
          데이터 집계 및 비교 기능을 개발했습니다. Node.js를 활용해 직접 API를 구현하여 
          과거 데이터 조회·관리 기능을 추가하고, 특정 조건에 맞춰 데이터를 필터링 및 
          가공해 차트에 반영할 수 있도록 설계했습니다.`,
        },
      ],
    },
    {
      name: "이슈 해결 및 유지보수",
      icon: "🛠️",
      info: [
        {
          title: "블루투스 모듈 변경으로 인한 연결 문제",
          desc: `일부 기기에서 블루투스 스캔이 되지 않는 문제가 
          있었습니다. 원인은 스캔 타임아웃 시간이 너무 짧아 신호가 약한 기기를 
          감지하지 못한 것으로 파악되었습니다. 이를 해결하기 위해 스캔 타임아웃 
          시간을 연장하고, 불완전한 결과가 감지되면 자동으로 재스캔하는 로직을 
          추가해 문제를 개선했습니다.`,
        },
      ],
    },
  ],
  meaning: [
    `이번 프로젝트는 제가 처음으로 React Native를 사용해 진행한 프로젝트라는 
      점에서 매우 의미가 깊습니다. React와 비슷한 점이 많아 비교적 익숙한 
      환경에서 시작할 수 있었고, 비교적 빠르게 적응하여 유지보수와 기능 개발을 
      성공적으로 수행할 수 있었습니다. 기초적인 컴포넌트 구조부터 네비게이션 
      방식까지 접해보면서 모바일 애플리케이션 전반에 대한 시야를 
      확장할 수 있었던 계기였다고 생각합니다.`,
    `그리고 이번 프로젝트를 통해 처음으로 백엔드 API 개발에 새롭게 도전해볼 
      수 있었습니다. Node.js를 활용해 백엔드 API를 작성하면서 
      처음에는 낯설고 어려운 부분이 많았지만, JavaScript의 친숙함 덕분에 빠르게 
      적응할 수 있었고, 이 과정에서 서버와 클라이언트의 상호작용을 깊이 이해할 수 
      있었고, 예를 들어 데이터를 필터링해 반환해야 하는 경우, 쿼리 파라미터 
      설계나 응답 형식을 어떻게 정리해야 할지 직접 고민하고 테스트하면서 
      서비스 전체의 흐름을 파악하는 안목을 키울 수 있었습니다.`,
    `사용자의 요청사항을 해결하고 유지보수하는 과정도 굉장히 흥미로웠습니다. 
    사용자 정보 입력 단계가 너무 길어서 측정 준비에만 10초 이상 걸린다는 
    피드백을 접했을 때, 단순히 입력 필드를 몇 개 줄이는 것도 당장의 해결 방법이 
    될 것이라고 생각했지만, '사용자가 처음 한 번 입력할 때는 큰 반감 없이 입력할 
    테지만, 같은 내용을 여러 번 입력하게 만드는 게 불편했던 거 아닐까?'라는 
    생각이 들었습니다. 그래서 로컬 스토리지를 이용해 이전 입력값을 저장하여 
    이후에는 자동으로 완성되도록 했고, 로그인된 사용자의 데이터가 저장되어 있다면 
    이를 자동으로 표시하도록 로직을 설계했습니다. 이 과정을 통해, 사용자의 
    불편함을 해결하는 데 있어 ‘필요한 정보만 받는 것’이 얼마나 
    중요한지 배웠습니다.`,
    `PDF 출력 기능 도입도 기억에 남는 부분입니다. 초기 버전에는 PDF 출력 기능이 
    포함되어 있지 않았습니다. 그러나 정기 고객 미팅에서 '결과지를 PDF로 다운로드 
    받아 확인하고 싶다'는 피드백을 받아 이를 새롭게 도입했습니다. 결과적으로 
    사용자들은 더 이상 화면을 스크린샷으로 저장하거나 다른 방법을 찾지 않아도 
    되어서, 편리하게 결과를 저장하고 공유할 수 있게 되었습니다. 이렇게 사용자의 
    요구사항들을 직접적으로 반영해보면서 사용자가 겪는 작은 불편함을 캐치하는 
    것, 이를 효율적으로 개선하는 것이 프론트엔드 개발자의 역할임을 느낄 수 
    있었습니다.`,
  ],
}
