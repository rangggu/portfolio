import { ProjectType } from "../project"

export const ELECTRON: ProjectType = {
  index: 3,
  title: "기업/행사 정보 안내 프로그램",
  subtitle: "다양한 정보를 표시/제공하는 키오스크 전용 데스크톱 앱",
  summary: "터치 스크린 및 키오스크에 최적화되어 정보를 제공/안내하는 데스크톱 앱",
  background: "/images/project/black.jpg",
  desc: [
    "Electron을 통한 데스크톱 앱 구현",
    "오프라인에서도 99% 이상의 안정성을 달성",
    "프로젝트를 단독 주도, 고객사 만족도 90% 이상 달성",
  ],
  date: "@2024. 01.",
  tag: "직장",
  contribution: 100,
  overview: {
    problem: [
      "인터넷이 없는 환경에서도 정보가 제공되어야 해요 😶",
      "관계자가 프로그램 내의 이미지나 각종 정보들을 쉽게 변경할 수 있어야 해요 😔",
    ],
    solution: [
      "Electron을 기반으로 오프라인 환경에서도 프로그램이 원활히 작동하도록 개발되었어요",
      "react-fs를 활용하여 관계자가 로컬 파일을 쉽게 교체할 수 있어요!",
    ],
  },
  preview: {
    type: "image",
    link: [""],
  },
  skill: [
    { name: "Electron", src: "/images/icon/electron.png" },
    { name: "React", src: "/images/icon/react.png" },
    { name: "TypeScript", src: "/images/icon/ts.png" },
    { name: "Tailwind CSS", src: "/images/icon/tailwind.png" },
    { name: "Figma", src: "/images/icon/figma.png" },
    { name: "React fs" },
    { name: "React slick" },
  ],
  result: [
    {
      title: "오프라인 안정성 향상",
      desc: [
        `<strong class="font-semibold text-yellow500">react-fs</strong>를 이용해 로컬 파일 시스템에서 데이터를 읽어오도록 설계하여, 인터넷 연결 없이도 안정적인 앱 동작을 구현`,
        `자동 재시작 로직을 구현해 오프라인 환경에서 <strong class="font-semibold text-yellow500">99%</strong> 이상의 안정성을 보장`,
      ],
    },
    {
      title: "성능 최적화",
      desc: [
        `메모리 캐싱을 사용하여 데이터 로딩 <strong class="font-semibold text-yellow500">최적화</strong>`,
        `용량 제한 및 lazy-loading 기술을 활용`,
      ],
    },
    {
      title: "신속한 개발 및 고객 만족도 극대화",
      desc: [
        `단독 주도로 <strong class="font-semibold text-yellow500">1~2주</strong> 내에 프로젝트를 완성`,
        `긴급 요구사항에 신속히 대응하여 만족도 <strong class="font-semibold text-yellow500">90%</strong> 이상 달성`,
      ],
    },
  ],
  function: [
    {
      name: "오프라인 아키텍처 설계",
      icon: "🖥️",
      info: [
        {
          title: "오프라인 아키텍처 설계",
          desc: `Electron과 react-fs를 활용해, 인터넷 연결 없이도 로컬 파일 
          시스템에서 필요한 데이터를 직접 읽어올 수 있는 아키텍처를 구현했습니다.`,
        },
        {
          title: "자동 재시작 로직 적용",
          desc: `Electron 내장 app 모듈을 사용해 주기적으로 헬스 체크를 
          실행하고 앱의 핵심 프로세스를 모니터링했습니다. 문제가 감지되면 
          app.relaunch()와 app.exit()를 호출하여 자동으로 재실행되도록 
          구현했습니다.`,
        },
        {
          title: "자동 업데이트 로직 구현",
          desc: `미리 합의된 파일 구조에 따라 이미지와 데이터를 변경하면 
            별도의 재부팅 없이도 프로그램이 이를 자동으로 반영하도록 로직을 
            설계했습니다.`,
        },
      ],
    },
    {
      name: "신속한 개발 및 고객 대응",
      icon: "💬",
      info: [
        {
          title: "신속한 개발 및 일정 단축",
          desc: `단독으로 주도한 프로젝트였음에도 불구하고 개발 일정을 약 20% 
            단축함으로써 고객사의 내부 일정에 여유를 제공할 수 있었습니다.`,
        },
        {
          title: "긴급 요구사항 대응",
          desc: `납품 후 고객사에서 긴급히 요청했던 로컬 파일이 변경되면 재부팅 없이 자동으로 
          업데이트하는 기능을 신속히 도입하고자 했습니다. 이를 계기로 고객사 
          설문에서 만족도 90% 이상을 달성할 수 있었습니다.`,
        },
      ],
    },
    {
      name: "성능 최적화 개발",
      icon: "⚡",
      info: [
        {
          title: "파일 메모리 캐싱",
          desc: `메모리 캐싱을 사용하여 데이터 로딩 속도를 최적화했습니다. 
          예를 들어, useRef를 활용해 자주 사용하는 데이터를 캐싱하고, 
          이미 로드된 데이터는 캐싱된 메모리를 활용하도록 구현했습니다.`,
        },
        {
          title: "이미지 로딩 최적화",
          desc: `용량 제한과 lazy-loading 기술을 적용해 대용량 이미지 로딩 시 
          불필요한 데이터를 미리 불러오지 않도록 최적화하였습니다.`,
        },
      ],
    },
  ],
  meaning: [
    `이번 프로젝트를 통해 Electron을 활용하여 데스크톱 애플리케이션을 처음으로 
      개발해보면서, 도전과 배움의 연속이었습니다. 기존에 주로 웹 
      개발만 진행했던 저로서는 데스크톱 환경과 키오스크 같은 특수 장비에 맞추어서
      개발하는 것이 낯설었지만, Electron의 구조와 동작 방식을 익히면서 새로운 기술에 
      대한 자신감을 쌓고 성취도 얻게 되었습니다.`,
    `프로그램이 탑재된 키오스크는 24시간 연속 운영되어야 했기 때문에, 예상치 못한 
      오류나 시스템 과부하에 대비하는 것이 필수적이었습니다. Electron 내장 app 
      모듈을 활용해 일정 시간 간격으로 헬스 체크를 수행하고, 문제가 감지되면 
      자동으로 재실행되도록 구현함으로써, 앱이 99% 이상의 안정성을 유지하도록 
      했습니다.`,
    `또한, 파일 로딩 성능을 향상시키기 위해 이미 불러온 이미지와 데이터를 메모리 
    캐싱하는 로직을 도입했습니다. React의 useRef와 같은 기능을 활용하여 
    자주 사용하는 데이터를 캐싱하고, 동일한 데이터는 매번 새로 불러오지 않고 
    캐시된 정보를 활용하도록 구현함으로써 전체 데이터 로딩 속도를 최적화할 수 
    있었습니다.`,
    `납품 후, 고객사에서 자체 행사 도중 이미지 파일 변경을 시도했지만, 
    변경된 이미지가 프로그램에 즉시 반영되지 않는 문제가 발생했습니다. 
    우선은 재부팅을 통해 임시로 문제를 해결하였으나, 실시간 업데이트의 필요성을 
    절감하여, react-fs를 활용해 로컬 파일 변경을 주기적으로 감지하고 변경된 
    파일을 자동으로 불러오는 기능을 신속히 도입했습니다. 이 개선 덕분에 고객사의 
    긴급 요청에 효과적으로 대응할 수 있었으며, 크리티컬한 이슈를 잘 해결해낸 
    제 스스로가 대견하기도 했던 것 같습니다. 이후 실시된 설문에서도 해당 기능에 
    대해 고객 만족도가 90% 이상이라는 긍정적인 평가를 받을 수 있었어서 더욱 뿌듯했습니다.`,
  ],
}
